R_type Team                                                     
Request for Comments: 0                                    Epitech
Obsoletes:                                                 December 2019
Category: Information


                      R-Type Network Game Protocol
                               R-Type RFC

status of this Memo

   This memo presents the Network Game Protocol used for the R-Type.

Copyright Notice

          Copyright (C) The Internet Society (1997).  All Rights Reserved.
          
Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Transfert Description . . . . . . . . . . . . . . . . . . . .   3
     2.1.  TCP . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  UDP . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Data Unit Dormat  . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Header  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.2.  Body  . . . . . . . . . . . . . . . . . . . . . . . . . .   5
   4.  TCP Commands  . . . . . . . . . . . . . . . . . . . . . . . .   5
     4.1.  handshake . . . . . . . . . . . . . . . . . . . . . . . .   5
       4.1.1.  From Client . . . . . . . . . . . . . . . . . . . . .   5
       4.1.2.  From Server . . . . . . . . . . . . . . . . . . . . .   5
     4.2.  createGame  . . . . . . . . . . . . . . . . . . . . . . .   5
       4.2.1.  From Client . . . . . . . . . . . . . . . . . . . . .   6
       4.2.2.  From Server . . . . . . . . . . . . . . . . . . . . .   6
     4.3.  joinGame  . . . . . . . . . . . . . . . . . . . . . . . .   6
       4.3.1.  From Client . . . . . . . . . . . . . . . . . . . . .   6
       4.3.2.  From Server . . . . . . . . . . . . . . . . . . . . .   7
     4.4.  observeGame . . . . . . . . . . . . . . . . . . . . . . .   7
       4.4.1.  From Client . . . . . . . . . . . . . . . . . . . . .   7
       4.4.2.  From Server . . . . . . . . . . . . . . . . . . . . .   7
     4.5.  showGame  . . . . . . . . . . . . . . . . . . . . . . . .   8
       4.5.1.  From Client . . . . . . . . . . . . . . . . . . . . .   8
       4.5.2.  From Server . . . . . . . . . . . . . . . . . . . . .   8
     4.6.  leaveGame . . . . . . . . . . . . . . . . . . . . . . . .   9
       4.6.1.  From Client . . . . . . . . . . . . . . . . . . . . .   9
       4.6.2.  From Server . . . . . . . . . . . . . . . . . . . . .   9
     4.7.  deleteGame  . . . . . . . . . . . . . . . . . . . . . . .   9
       4.7.1.  From Client . . . . . . . . . . . . . . . . . . . . .   9
       4.7.2.  From Server . . . . . . . . . . . . . . . . . . . . .  10
     4.8.  listGames . . . . . . . . . . . . . . . . . . . . . . . .  10
       4.8.1.  From Client . . . . . . . . . . . . . . . . . . . . .  10
       4.8.2.  From Server . . . . . . . . . . . . . . . . . . . . .  10
     4.9.  listLevels  . . . . . . . . . . . . . . . . . . . . . . .  10
       4.9.1.  From Client . . . . . . . . . . . . . . . . . . . . .  10
       4.9.2.  From Server . . . . . . . . . . . . . . . . . . . . .  10
     4.10. updatePseudo  . . . . . . . . . . . . . . . . . . . . . .  11
       4.10.1.  From Client  . . . . . . . . . . . . . . . . . . . .  11
       4.10.2.  From Server  . . . . . . . . . . . . . . . . . . . .  11
     4.11. error . . . . . . . . . . . . . . . . . . . . . . . . . .  11
       4.11.1.  From Client  . . . . . . . . . . . . . . . . . . . .  11
       4.11.2.  From Server  . . . . . . . . . . . . . . . . . . . .  11
     4.12. endGame . . . . . . . . . . . . . . . . . . . . . . . . .  12
       4.12.1.  From Client  . . . . . . . . . . . . . . . . . . . .  12
       4.12.2.  From Server  . . . . . . . . . . . . . . . . . . . .  12
     4.13. showLevel . . . . . . . . . . . . . . . . . . . . . . . .  12
       4.13.1.  From Client  . . . . . . . . . . . . . . . . . . . .  12
       4.13.2.  From Server  . . . . . . . . . . . . . . . . . . . .  13
   5.  UDP Commands  . . . . . . . . . . . . . . . . . . . . . . . .  13
     5.1.  move  . . . . . . . . . . . . . . . . . . . . . . . . . .  13
       5.1.1.  From Client . . . . . . . . . . . . . . . . . . . . .  13
       5.1.2.  From Server . . . . . . . . . . . . . . . . . . . . .  14
     5.2.  fire  . . . . . . . . . . . . . . . . . . . . . . . . . .  14
       5.2.1.  From Client . . . . . . . . . . . . . . . . . . . . .  14
       5.2.2.  From Server . . . . . . . . . . . . . . . . . . . . .  14
     5.3.  moveResource  . . . . . . . . . . . . . . . . . . . . . .  14
       5.3.1.  From Client . . . . . . . . . . . . . . . . . . . . .  14
       5.3.2.  From Server . . . . . . . . . . . . . . . . . . . . .  14
     5.4.  destroyResource . . . . . . . . . . . . . . . . . . . . .  15
       5.4.1.  From Client . . . . . . . . . . . . . . . . . . . . .  15
       5.4.2.  From Server . . . . . . . . . . . . . . . . . . . . .  15
     5.5.  updateScore . . . . . . . . . . . . . . . . . . . . . . .  16
       5.5.1.  From Client . . . . . . . . . . . . . . . . . . . . .  16
       5.5.2.  From Server . . . . . . . . . . . . . . . . . . . . .  16
     5.6.  timeElapsedPing . . . . . . . . . . . . . . . . . . . . .  16
       5.6.1.  From Client . . . . . . . . . . . . . . . . . . . . .  16
       5.6.2.  From Server . . . . . . . . . . . . . . . . . . . . .  16
   6.  Annex . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17
     6.1.  Instruction Code  . . . . . . . . . . . . . . . . . . . .  17
     6.2.  Error Code  . . . . . . . . . . . . . . . . . . . . . . .  18
     6.3.  enum Direction  . . . . . . . . . . . . . . . . . . . . .  18
     6.4.  enum ResourceType . . . . . . . . . . . . . . . . . . . .  18
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  18
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction

   This document provides a full documentation for the Network Game
   Protocol of the R-Type Game.

   It provides all the necessary information to understand how to
   communicate with a R-Type server and with a R-Type client: commands,
   protocols, packets format...


2.  Transfert Description

   The R-Type Network Communication Protocol is based on the TCP and UDP
   network protocols.
   The R-Type Network Communication is a binary protocol.

2.1.  TCP

   The TCP protocol is used for all the commands that are not related to
   a game action.

   Basically, all the commands that are related to the client's menu
   (list games, create game, delete game, ...) must be sent by using the
   TCP network protocol.

   This protocol has been chosen to provide a safe client-server
   communication for important commands

2.2.  UDP

   The UDP protocol is used for all the commands that are related to a
   game action.

   Basically, all movements informations are transmitted by using the
   UDP network protocol.

   This protocol has been chosen to provide a fast and efficient client-
   server communication

3.  Data

   Each command is formatted by using the following diagram: a common
   header and a specific body.


3.1.  Header

   The header is composed of a magic_code and of an instruction code.

    magic_code  | instruction_code
      uint64_t  |      int32_t    

   The instruction_code corresponds to a specific value depending of the
   command.  It must be used to know what is the size of the packet's
   body.

3.2.  Body

   The packet's body contains a structure data which depends of the
   command that has been sent.

4.  TCP Commands

4.1.  VERIFY

4.1.1.  From Client

   This command must be sent just after beeing connecting to the R-Type
   server.

   It informs the server that you are a valid R-Type client.

   Until you send this command, the other commands you'll send may not
   be treated by the server.

   This command does not have a body.

4.1.2.  From Server

   This command must be sent just after accepting a R-Type client.

   It informs the client that you are a valid R-Type server.

   Until you send this command, the other commands you'll send may not
   be treated by the client.

   This command does not have a body.

4.2.  CREATE
4.2.1.  From Client

   This command is used to create a new game on the server.

   This command is composed of the following body:

   |   name   | nbPlayers |       nbRoom |
   | char[64] |   char    |     char     |

   The name attribute is the name you want to give to the created game.

   The nbPlayers attribute is the maximum number of players who can play
   to the created game.  This number must be between 1 and 4.

   The Room attribute is the maximum number of spectators who
   can attend to the created game.  This number must be between 1 and 4.

   The server must answer with an error command packet.

   In case of success, the client becomes the owner of the game and can
   delete it.

   The ownership can not be given to an other client.

4.3.  JOIN
4.3.1.  From Client

   This command is used to join a game as an active player.

   This command is composed of the following body:

   |   name   |
   | char[64] |

   The name attribute is the name of the game you want to join.

   In case of success, the client joins the game and the server must
   send informations concerning players positions, bullets positions,
   current script execution time...

4.4.1.  From Client

   This command is used to join a game as an observer.

   This command is composed of the following body:

   |   name   |
   | char[64] |

   The name attribute is the name of the game you want to join.

   The server must answer with an error command.

   In case of success, the client joins the game and the server must
   send informations concerning players positions, bullets positions,
   current script execution time...

   In case of success, the client can not send UDP packets which stand
   for client actions (eg: move, fire).

4.5.  SHOW

4.5.1.  From Client

   This command is used to ask for game informations.

   This command is composed of the following body:

   |   Name   |
   | char[64] |

   The name attribute is the name of the game which you want
   information.

   The server must answer with an error command.

   In case of success, the server must send a showGame command.

4.5.2.  From Server

   This command is used to send game information to a client.

   This command is composed of the following body:

   The name :
   attribute is the name of the game concerned by the
   information.

   The levelName :
   attribute is the name of the level script used in the
   game.

   The nbPlayers :
   attribute is the number of clients that are currently
   playing on the game.

   The maxPlayers :
   attribute is the maximum number of clients that can
   play on this game.

   The nbObservers :
   attribute is the number of clients that are currently
   observing the game.

4.6.  QUIT

4.6.1.  From Client

   This command is used to leave a game.

   This command is composed of the following body:

   |   name   |
   | char[64] |

   The name attribute is the name of the game you want to leave.

   The server must answer with an error command.

   In case of success, the client leaves the game.

4.7.  DELETE

   Instruction code: 0x04

4.7.1.  From Client

   This command is used to delete a game.

   This command can only succeed if you are the owner of the game.

   This command is composed of the following body:

   |   name   |
   | char[64] |

   The name attribute is the name of the game you want to delete.

   The server must answer with an error command.

4.7.2.  From Server

   This command has no equivalent server-side.

4.8.  LIST
4.8.1.  From Client

   This command is used to list all the games.

   This command is composed of an empty body.

   The server may answer with a loop of showGame commands.

4.8.2.  From Server

   This command has no equivalent server-side.

4.9.1.  From Client

   This command is used to list all the levels.

   This command is composed of an empty body.

   The server may answer with a loop of showLevel commands.

4.9.2.  From Server

   This command has no equivalent server-side.

4.11.  ERROR
4.11.1.  From Client

   This command has no equivalent client-side.

4.11.2.  From Server

   This command is used to notify a client if an error occured during
   the last received command treatment.

   This command is composed of the following body:

   | instructionCode | errorCode |
   |     int     |  int  |


   o  OK: return 0

   o  KO: return 1

4.12.  END

4.12.1.  From Client

   This command has no equivalent client-side.

4.12.2.  From Server

   This command is used to notify a client that the game has ended.

   This command may be sent in different context: the game has been
   deleted, the player has been killed or the game has ended.

   This command is composed of the following body:

   |   game   |
   | char[64] |

   The game attribute is name of the concerned game.

   After sending this command, the server must not send UDP packets
   which stand for game actions anymore.

   After receiving this command, the client can not send UDP packets
   which stand for game actions anymore.


   This command has no equivalent client-side.

5.  UDP Commands

5.1.  Move
5.1.1.  From Client

   This command is used to notify the server that the player want to
   move in the given direction.

   This command is composed of the following body:

   |-----------|
   | direction |
   |    char   |
   |-----------|

   The direction attribute is direction the player want to take.  It
   must be one of the following value:

   o  LEFT: 0

   o  RIGHT: 1

   o  TOP: 2

   o  BOTTOM: 3


5.1.2.  From Server

   This command has no equivalent server-side.

5.2.  MISSILE
5.2.1.  From Client

   This command is used to notify the server that the player want to
   fire a bullet.

   This command is composed of an empty body.

5.2.2.  From Server

   This command has no equivalent server-side.

5.3.  Resource
5.3.1.  From Client

   This command has no equivalent client-side.

5.3.2.  From Server

   This command is used to notify a client that a resource has moved.

   This command is composed of the following body:

   |----------------------------------------|
   |    id   | type |   x   |   y   | angle |
   | int32_t | char | float | float | float |
   |----------------------------------------|

   The id attribute is the id of the element.  Each element has a unique
   id.

   The type attribute is the type of the resource.  The type must have
   one of the following value:

   o  PLAYER: 1

   o  BULLET: 2

   The x and y attributes give the new position of the resource on the
   map.

5.4.  DestroyResource
5.4.1.  From Client

   This command has no equivalent client-side.

5.4.2.  From Server

   This command is used to notify a client that a resource has been
   destroyed.

   This command is composed of the following body:

   |-----------------|
   |    id    | type |
   | uint64_t | char |
   |-----------------|

   The id attribute is the unique id of the destroyed resource.

   The type is the type of the destroyed resource.  It must have one of
   the following values:

   o  PLAYER: 0x01

   o  BULLET: 0x02


5.5.  Score
5.5.1.  From Client

   This command has no equivalent client-side.

5.5.2.  From Server

   This command is used to notify a client about the score of a player.

   This command is composed of the following body:

   The id:
   attribute is the id of the concerned player.

   The pseudo:
   attribute is the pseudo of the concerned player.

   The score:
   attribute is the score of the concerned player.


6.  RESUME

6.1.  Instruction Code

   o  error

   o  createGame

   o  joinGame

   o  showGame

   o  deleteGame

   o  listPLAYERGames

   o  quit

   o  move: 0x08

   o  fire: 0x09

   o  handshake: 0x0A

   o  endGame: 0x0B

   o  moveResource: 0x0C

   o  destroyResource: 0x0D


7.  References

   [RFC2629]  Rose, M., "Writing I-Ds and RFCs using XML", RFC 2629,
              June 1999.

Author's Address

